generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 以下為資料表定義
model Blog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  title     String
  content   String?
  published Boolean  @default(false)
}

model TimeLog {
  id        Int       @id @default(autoincrement())
  title     String
  startTime DateTime  @map("start_time")
  endTime   DateTime? @map("end_time")
  userId    Int?      @map("user_id")
  memo      String?
  steps     Step[]
  user      User?     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  featuredShares FeaturedShare[]
}

model Step {
  id          Int       @id @default(autoincrement())
  timeLogId   Int       @map("time_log_id")
  userId      Int?      @map("user_id")
  title       String
  description String?
  startTime   DateTime  @map("start_time")
  endTime     DateTime? @map("end_time")
  timeLog     TimeLog   @relation(fields: [timeLogId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  token     String
  hash      String?
  createdAt DateTime @default(now()) @map("created_at")
  expiredAt DateTime @map("expired_at")
}

model User {
  user_id           Int            @id @default(autoincrement())
  name              String?
  password          String
  email             String         @unique
  phone             String?
  birthdate         DateTime?
  gender            String?
  avatar            String?
  level             Int            @default(0)
  valid             Boolean        @default(true)
  createdAt         DateTime       @default(now()) @map("created_at")
  googleUid         String?        @unique @map("google_uid")
  lineUid           String?        @unique @map("line_uid")
  lineAccessToken   String?
  refreshToken      String?
  iat               String?
  exp               String?
  current_log_count Int            @default(0) @map("current_log_count")
  due_date          DateTime?      @map("due_date")
  paid              Boolean        @default(false)
  paid_date         DateTime?      @map("paid_date")
  paymentOrders     PaymentOrder[]
  steps             Step[]
  timeLogs          TimeLog[]
  featuredShares    FeaturedShare[]
}

model PaymentOrder {
  id                 Int       @id @default(autoincrement())
  orderId            String    @unique
  userId             Int?      @map("user_id")
  amount             Int
  currency           String    @default("TWD")
  status             String    @default("PENDING")
  transactionId      String?   @unique @map("transaction_id")
  packages           Json
  redirectUrls       Json?     @map("redirect_urls")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  dueAt              DateTime? @map("due_at")
  isCurrent          Boolean   @default(true) @map("is_current")
  paidAt             DateTime? @map("paid_at")
  subscriptionStatus String?   @default("ACTIVE") @map("subscription_status")
  user               User?     @relation(fields: [userId], references: [user_id])

  @@index([userId, isCurrent]) // 索引：用戶ID + 是否當前訂閱
  @@index([dueAt]) // 索引：到期時間，用於查詢過期訂閱
}

model FeaturedShare {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  timeLogId     Int       @map("time_log_id")
  title         String    // 分享標題
  description   String?   // 分享描述
  shareReason   String?   @map("share_reason") // 分享原因
  starCount     Int       @default(0) @map("star_count") // 星星數量
  isPublic      Boolean   @default(true) @map("is_public") // 是否公開
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  user          User      @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  timeLog       TimeLog   @relation(fields: [timeLogId], references: [id], onDelete: Cascade)

  @@index([userId]) // 索引：用戶ID，用於查詢用戶的分享
  @@index([isPublic, createdAt]) // 複合索引：公開狀態 + 創建時間，用於查詢公開分享
  @@index([starCount]) // 索引：星星數量，用於排序
}